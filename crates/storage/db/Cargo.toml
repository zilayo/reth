[package]
name = "reth-db"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true
description = "Database primitives used in reth."

[lints]
workspace = true

[dependencies]
# reth
reth-primitives.workspace = true
reth-interfaces.workspace = true
reth-codecs.workspace = true
reth-libmdbx = { workspace = true, optional = true, features = ["return-borrowed", "read-tx-timeouts"] }
reth-nippy-jar.workspace = true
reth-tracing.workspace = true

# codecs
serde = { workspace = true, default-features = false }
parity-scale-codec = { version = "3.2.1", features = ["bytes"] }
modular-bitfield = "0.11.2"

# metrics
reth-metrics.workspace = true
metrics.workspace = true

# misc
bytes.workspace = true
page_size = "0.6.0"
thiserror.workspace = true
tempfile = { workspace = true, optional = true }
parking_lot.workspace = true
derive_more.workspace = true
eyre.workspace = true
paste = "1.0"
rustc-hash = "1.1.0"

# arbitrary utils
arbitrary = { workspace = true, features = ["derive"], optional = true }
proptest = { workspace = true, optional = true }
proptest-derive = { workspace = true, optional = true }
strum = { workspace = true, features = ["derive"] }
once_cell.workspace = true

[dev-dependencies]
# reth libs with arbitrary
reth-primitives = { workspace = true, features = ["arbitrary"] }
reth-codecs.workspace = true
reth-interfaces.workspace = true

rand.workspace = true
serde_json.workspace = true

tempfile.workspace = true
test-fuzz = "5"

pprof = { workspace = true, features = ["flamegraph", "frame-pointer", "criterion"] }
criterion.workspace = true
iai = "0.1.1"

arbitrary = { workspace = true, features = ["derive"] }
proptest.workspace = true
proptest-derive.workspace = true

paste = "1.0"

assert_matches.workspace = true

[features]
default = ["mdbx"]
test-utils = ["tempfile", "arbitrary"]
mdbx = ["reth-libmdbx"]
bench = []
arbitrary = [
    "reth-primitives/arbitrary",
    "dep:arbitrary",
    "dep:proptest",
    "dep:proptest-derive",
]

[[bench]]
name = "hash_keys"
required-features = ["test-utils"]
harness = false

[[bench]]
name = "criterion"
required-features = ["test-utils"]
harness = false

[[bench]]
name = "iai"
required-features = ["test-utils"]
harness = false
